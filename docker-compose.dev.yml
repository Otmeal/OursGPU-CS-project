# 開發者體驗要快：pnpm store 與 node_modules 都用 named volumes，避免每次重裝
volumes:
  pnpm-store:
  controller_node_modules:
  worker1_node_modules:
  worker2_node_modules:
  pgdata_dev:
  minio_data_dev:

services:
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    container_name: oursgpu-anvil-dev
    entrypoint: ["anvil"]
    command:
      ["--host","0.0.0.0",
       "--port","8545",
       "--chain-id","31337",
       "--block-time","1",
       "--mnemonic","test test test test test test test test test test test junk",
       "--accounts","10",
       "--balance","1000000",
       "--base-fee","0",
       "--gas-price","0"]
    ports:
      - "8545:8545"
  postgres:
    image: postgres:16-alpine
    container_name: oursgpu-postgres-dev
    environment:
      POSTGRES_DB: oursgpu
      POSTGRES_USER: oursgpu
      POSTGRES_PASSWORD: oursgpu
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  minio:
    image: minio/minio:RELEASE.2025-01-20T14-49-07Z
    container_name: oursgpu-minio-dev
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data_dev:/data
    ports:
      - "9000:9000"
      - "9001:9001"
  controller1:
    build:
      context: ./ours-gpu
      dockerfile: ./apps/controller/Dockerfile.dev
    container_name: oursgpu-controller1-dev
    working_dir: /app
    # 綁定 Nest 工作區根目錄（./ours-gpu）到 /app，讓 pnpm 能找到 package.json / pnpm-workspace.yaml
    volumes:
      - ./ours-gpu:/app
      - pnpm-store:/root/.pnpm-store
      - controller_node_modules:/app/node_modules
    # 確保依賴已安裝後再啟動（初次掛載空的 node_modules volume 時很重要）
    command: >
      sh -lc "pnpm install \
      && (pnpm prisma migrate deploy || pnpm prisma db push) \
      && pnpm exec nest start controller --watch"
    environment:
      NODE_ENV: development
      # controller 自己跑 gRPC 在 0.0.0.0:50051；workers 透過服務名連（controller1）
      CONTROLLER_GRPC: 0.0.0.0:50051
      DATABASE_URL: postgresql://oursgpu:oursgpu@postgres:5432/oursgpu
      MINIO_ENDPOINT: minio
      MINIO_PORT: "9000"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: "false"
      MINIO_BUCKET_JOBS: jobs
      # For presigned URLs returned by HTTP APIs (host-side e2e or UI), rewrite to localhost
      MINIO_PUBLIC_URL: http://localhost:9000
      # EVM chain & wallet
      CHAIN_RPC_URL: http://anvil:8545
      CHAIN_ID: "31337"
      WALLET_MNEMONIC: test test test test test test test test test test test junk
      WALLET_INDEX: "0"
    env_file:
      - ./ours-gpu/.env.contracts
    ports:
      - "3000:3000"   # REST / HTTP
      - "50051:50051" # gRPC
    # 讓日誌更順手
    tty: true
    stdin_open: true
    healthcheck:
      test:
        - CMD-SHELL
        - >-
          node -e "require('http').get('http://127.0.0.1:3000/health',
          r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s
    depends_on:
      anvil:
        condition: service_started

  worker1:
    build:
      context: ./ours-gpu
      dockerfile: ./apps/worker/Dockerfile.dev
    container_name: oursgpu-worker1-dev
    working_dir: /app
    volumes:
      - ./ours-gpu:/app
      - pnpm-store:/root/.pnpm-store
      - worker1_node_modules:/app/node_modules
    command: >
      sh -lc "pnpm install \
      && pnpm exec nest start worker --watch"
    environment:
      NODE_ENV: development
      # 用服務名連 controller1：compose 裡服務名即 DNS
      CONTROLLER_GRPC: controller1:50051
      # Static worker identity for stable registration across restarts
      WORKER_ID: worker1
      # EVM chain & wallet
      CHAIN_RPC_URL: http://anvil:8545
      CHAIN_ID: "31337"
      WALLET_MNEMONIC: test test test test test test test test test test test junk
      WALLET_INDEX: "1"
    env_file:
      - ./ours-gpu/.env.contracts
    depends_on:
      controller1:
        condition: service_healthy
      postgres:
        condition: service_started
      minio:
        condition: service_started
      anvil:
        condition: service_started
    tty: true
    stdin_open: true

  worker2:
    build:
      context: ./ours-gpu
      dockerfile: ./apps/worker/Dockerfile.dev
    container_name: oursgpu-worker2-dev
    working_dir: /app
    volumes:
      - ./ours-gpu:/app
      - pnpm-store:/root/.pnpm-store
      - worker2_node_modules:/app/node_modules
    command: >
      sh -lc "pnpm install \
      && pnpm exec nest start worker --watch"
    environment:
      NODE_ENV: development
      CONTROLLER_GRPC: controller1:50051
      # Static worker identity for stable registration across restarts
      WORKER_ID: worker2
      # EVM chain & wallet
      CHAIN_RPC_URL: http://anvil:8545
      CHAIN_ID: "31337"
      WALLET_MNEMONIC: test test test test test test test test test test test junk
      WALLET_INDEX: "2"
    env_file:
      - ./ours-gpu/.env.contracts
    depends_on:
      controller1:
        condition: service_healthy
      postgres:
        condition: service_started
      minio:
        condition: service_started
      anvil:
        condition: service_started
    tty: true
    stdin_open: true
