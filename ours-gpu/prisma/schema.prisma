generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  REQUESTED
  SCHEDULED
  PROCESSING
  VERIFYING
  DONE
  FAILED
}

enum VerificationMethod {
  BUILTIN_HASH
  USER_PROGRAM
}

model Job {
  id               String     @id @default(uuid()) @db.Uuid
  orgId            String
  jobType          String
  status           JobStatus  @default(REQUESTED)
  objectKey        String     // MinIO object key containing job payload/config
  // MinIO object key to primary output/result (e.g., outputs/<jobId>/result.txt)
  outputObjectKey  String?
  metadata         Json?
  priority         Int        @default(0)
  workerId         String     @db.Text
  worker           Worker     @relation(fields: [workerId], references: [id])
  // Optional owner of the job (user)
  userId           String?    @db.Text
  user             User?      @relation(fields: [userId], references: [id])
  // Command to start the computation in worker runtime (e.g., bash entrypoint)
  entryCommand     String?
  // How to verify results: built-in hash vs user-provided verifier program
  verification     VerificationMethod @default(BUILTIN_HASH)
  // If USER_PROGRAM: MinIO object key to the verifier program/assets
  verifierObjectKey String?
  // If USER_PROGRAM: command to execute verifier program
  verifierCommand   String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([workerId])
  @@index([userId])
}

model Worker {
  id          String   @id @db.Text
  orgId       String
  concurrency Int
  running     Int      @default(0)
  lastSeen    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation: one Worker has many Jobs
  jobs        Job[]
}

model User {
  // Primary key is the wallet address (normalized lowercase by app code)
  id             String  @id @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relation: one User has many Jobs
  jobs           Job[]
}
